#include <stdexcept>
#include "cpu.hpp"
#include "../interrupt_manager.hpp"

Cpu::Cpu(InterruptManager* interrupt_manager, Mmu* mmu) :
    interrupt_manager(interrupt_manager), mmu(mmu) {
    
    initialise_opcodes_dictionaries();
    opcode = opcodes[0];
}

// Carry out 1 t-cycle.
void Cpu::tick() {

    // Only act every 4 t-cycles
    if (++locked < 4) {
        return;
    }
    locked = 0;

    // Check for interrupts
    if (state != INTERRUPT && interrupt_manager->is_interrupt_requested()) {
        set_interrupt_state();
    }

    /* Set master interrupt enable if scheduled - done here since EI opcode
     * delays one instruction. */
    if (interrupt_enable_scheduled) {
        interrupt_manager->ime = true;
    }

    switch(state) {

        case FETCH:
            fetch_cycle();
            break;

        case WORK:
            work_cycle();
            break;

        case INTERRUPT:
            interrupt_cycle();
            break;

        case HALT:
        case STOP:
            return;
    }

}

/* Set the Cpu state to FETCH.
 * Resets cb_prefix. */
void Cpu::set_fetch_state() {
    state = FETCH;
    cb_prefix = false;
}

/* Set the Cpu state to WORK.
 * Resets current_m_cycles and early_exit. */
void Cpu::set_work_state() {
    state = WORK;
    current_m_cycles = 0;
    early_exit = false;
}

/* Set the Cpu state to INTERRUPT.
 * Resets current_m_cycles. */
void Cpu::set_interrupt_state() {
    state = INTERRUPT;
    current_m_cycles = 0;
}

/* Carry out 1 FETCH m-cycle.
 * Reads the address at the current reg.pc and increments it.
 * Sets cb_prefix or the current opcode and state as necessary. */
void Cpu::fetch_cycle() {

    uint8_t opcode_address = mmu->read(reg.pc++);

    if (!cb_prefix){
        switch(opcode_address) {
            case 0xCB:
                cb_prefix = true;
                return;
            case 0x76:
                state = HALT;
                return;
            case 0x10:
                state = STOP;
                return;
        }
    }

    opcode = cb_prefix ? cb_opcodes[opcode_address] : opcodes[opcode_address];
    set_work_state();
}

/* Carry out 1 WORK m-cycle.
 * Executes the opcode.step at the current_m_cycle and increments it.
 * Sets to FETCH state if exits early.
 * Carries out an additional fetch_cycle if on the last step of the opcode. */
void Cpu::work_cycle() {

    // Opcodes sometimes do nothing in last m-cycle
    try {
        opcode->steps.at(current_m_cycles++)();
    }
    catch(const std::out_of_range& ex) {}

    if (early_exit) {
        set_fetch_state();
        return;
    }

    if (current_m_cycles * 4 == opcode->t_cycles) {
        set_fetch_state();
        fetch_cycle(); // Fetch in same m-cycle as last working m-cycle
        return;
    }
}

/* Carry out 1 m-cycle of the INTERRUPT state. 
 * - First cycle - wait.
 * - Second cycle - acknowledge interrupt.
 * - Third and fourth cycles - push reg.pc onto the stack.
 * - Final cycle - set reg.pc to corresponding handler address. */
void Cpu::interrupt_cycle() {

    switch(current_m_cycles) {
        
        case 0:
            break;
        
        case 1:
            interrupt_type = interrupt_manager->get_enabled();
            if (interrupt_type == InterruptType::NONE) {
                set_fetch_state();
                return;
            }
            interrupt_manager->acknowledge(interrupt_type);
            interrupt_manager->ime = false;
            break;

        case 2:
            reg.sp--;
            mmu->write(reg.sp--, reg.pc >> 8);
            break;

        case 3:
            mmu->write(reg.sp, reg.pc & 0xFF);
            break;

        case 4:
            reg.pc = interrupt_manager->get_handler_address(interrupt_type);
            set_fetch_state();
            return;
    }

    current_m_cycles += 1;
}

// Initialise both opcode dictionaries.
void Cpu::initialise_opcodes_dictionaries() {
    
    opcodes = {
        {0x00, &opcode_0x00},
        {0x01, &opcode_0x01},
        {0x02, &opcode_0x02},
        {0x03, &opcode_0x03},
        {0x04, &opcode_0x04},
        {0x05, &opcode_0x05},
        {0x06, &opcode_0x06},
        {0x07, &opcode_0x07},
        {0x08, &opcode_0x08},
        {0x09, &opcode_0x09},
        {0x0a, &opcode_0x0a},
        {0x0b, &opcode_0x0b},
        {0x0c, &opcode_0x0c},
        {0x0d, &opcode_0x0d},
        {0x0e, &opcode_0x0e},
        {0x0f, &opcode_0x0f},
        {0x10, &opcode_0x10},
        {0x11, &opcode_0x11},
        {0x12, &opcode_0x12},
        {0x13, &opcode_0x13},
        {0x14, &opcode_0x14},
        {0x15, &opcode_0x15},
        {0x16, &opcode_0x16},
        {0x17, &opcode_0x17},
        {0x18, &opcode_0x18},
        {0x19, &opcode_0x19},
        {0x1a, &opcode_0x1a},
        {0x1b, &opcode_0x1b},
        {0x1c, &opcode_0x1c},
        {0x1d, &opcode_0x1d},
        {0x1e, &opcode_0x1e},
        {0x1f, &opcode_0x1f},
        {0x20, &opcode_0x20},
        {0x21, &opcode_0x21},
        {0x22, &opcode_0x22},
        {0x23, &opcode_0x23},
        {0x24, &opcode_0x24},
        {0x25, &opcode_0x25},
        {0x26, &opcode_0x26},
        {0x27, &opcode_0x27},
        {0x28, &opcode_0x28},
        {0x29, &opcode_0x29},
        {0x2a, &opcode_0x2a},
        {0x2b, &opcode_0x2b},
        {0x2c, &opcode_0x2c},
        {0x2d, &opcode_0x2d},
        {0x2e, &opcode_0x2e},
        {0x2f, &opcode_0x2f},
        {0x30, &opcode_0x30},
        {0x31, &opcode_0x31},
        {0x32, &opcode_0x32},
        {0x33, &opcode_0x33},
        {0x34, &opcode_0x34},
        {0x35, &opcode_0x35},
        {0x36, &opcode_0x36},
        {0x37, &opcode_0x37},
        {0x38, &opcode_0x38},
        {0x39, &opcode_0x39},
        {0x3a, &opcode_0x3a},
        {0x3b, &opcode_0x3b},
        {0x3c, &opcode_0x3c},
        {0x3d, &opcode_0x3d},
        {0x3e, &opcode_0x3e},
        {0x3f, &opcode_0x3f},
        {0x40, &opcode_0x40},
        {0x41, &opcode_0x41},
        {0x42, &opcode_0x42},
        {0x43, &opcode_0x43},
        {0x44, &opcode_0x44},
        {0x45, &opcode_0x45},
        {0x46, &opcode_0x46},
        {0x47, &opcode_0x47},
        {0x48, &opcode_0x48},
        {0x49, &opcode_0x49},
        {0x4a, &opcode_0x4a},
        {0x4b, &opcode_0x4b},
        {0x4c, &opcode_0x4c},
        {0x4d, &opcode_0x4d},
        {0x4e, &opcode_0x4e},
        {0x4f, &opcode_0x4f},
        {0x50, &opcode_0x50},
        {0x51, &opcode_0x51},
        {0x52, &opcode_0x52},
        {0x53, &opcode_0x53},
        {0x54, &opcode_0x54},
        {0x55, &opcode_0x55},
        {0x56, &opcode_0x56},
        {0x57, &opcode_0x57},
        {0x58, &opcode_0x58},
        {0x59, &opcode_0x59},
        {0x5a, &opcode_0x5a},
        {0x5b, &opcode_0x5b},
        {0x5c, &opcode_0x5c},
        {0x5d, &opcode_0x5d},
        {0x5e, &opcode_0x5e},
        {0x5f, &opcode_0x5f},
        {0x60, &opcode_0x60},
        {0x61, &opcode_0x61},
        {0x62, &opcode_0x62},
        {0x63, &opcode_0x63},
        {0x64, &opcode_0x64},
        {0x65, &opcode_0x65},
        {0x66, &opcode_0x66},
        {0x67, &opcode_0x67},
        {0x68, &opcode_0x68},
        {0x69, &opcode_0x69},
        {0x6a, &opcode_0x6a},
        {0x6b, &opcode_0x6b},
        {0x6c, &opcode_0x6c},
        {0x6d, &opcode_0x6d},
        {0x6e, &opcode_0x6e},
        {0x6f, &opcode_0x6f},
        {0x70, &opcode_0x70},
        {0x71, &opcode_0x71},
        {0x72, &opcode_0x72},
        {0x73, &opcode_0x73},
        {0x74, &opcode_0x74},
        {0x75, &opcode_0x75},
        {0x76, &opcode_0x76},
        {0x77, &opcode_0x77},
        {0x78, &opcode_0x78},
        {0x79, &opcode_0x79},
        {0x7a, &opcode_0x7a},
        {0x7b, &opcode_0x7b},
        {0x7c, &opcode_0x7c},
        {0x7d, &opcode_0x7d},
        {0x7e, &opcode_0x7e},
        {0x7f, &opcode_0x7f},
        {0x80, &opcode_0x80},
        {0x81, &opcode_0x81},
        {0x82, &opcode_0x82},
        {0x83, &opcode_0x83},
        {0x84, &opcode_0x84},
        {0x85, &opcode_0x85},
        {0x86, &opcode_0x86},
        {0x87, &opcode_0x87},
        {0x88, &opcode_0x88},
        {0x89, &opcode_0x89},
        {0x8a, &opcode_0x8a},
        {0x8b, &opcode_0x8b},
        {0x8c, &opcode_0x8c},
        {0x8d, &opcode_0x8d},
        {0x8e, &opcode_0x8e},
        {0x8f, &opcode_0x8f},
        {0x90, &opcode_0x90},
        {0x91, &opcode_0x91},
        {0x92, &opcode_0x92},
        {0x93, &opcode_0x93},
        {0x94, &opcode_0x94},
        {0x95, &opcode_0x95},
        {0x96, &opcode_0x96},
        {0x97, &opcode_0x97},
        {0x98, &opcode_0x98},
        {0x99, &opcode_0x99},
        {0x9a, &opcode_0x9a},
        {0x9b, &opcode_0x9b},
        {0x9c, &opcode_0x9c},
        {0x9d, &opcode_0x9d},
        {0x9e, &opcode_0x9e},
        {0x9f, &opcode_0x9f},
        {0xa0, &opcode_0xa0},
        {0xa1, &opcode_0xa1},
        {0xa2, &opcode_0xa2},
        {0xa3, &opcode_0xa3},
        {0xa4, &opcode_0xa4},
        {0xa5, &opcode_0xa5},
        {0xa6, &opcode_0xa6},
        {0xa7, &opcode_0xa7},
        {0xa8, &opcode_0xa8},
        {0xa9, &opcode_0xa9},
        {0xaa, &opcode_0xaa},
        {0xab, &opcode_0xab},
        {0xac, &opcode_0xac},
        {0xad, &opcode_0xad},
        {0xae, &opcode_0xae},
        {0xaf, &opcode_0xaf},
        {0xb0, &opcode_0xb0},
        {0xb1, &opcode_0xb1},
        {0xb2, &opcode_0xb2},
        {0xb3, &opcode_0xb3},
        {0xb4, &opcode_0xb4},
        {0xb5, &opcode_0xb5},
        {0xb6, &opcode_0xb6},
        {0xb7, &opcode_0xb7},
        {0xb8, &opcode_0xb8},
        {0xb9, &opcode_0xb9},
        {0xba, &opcode_0xba},
        {0xbb, &opcode_0xbb},
        {0xbc, &opcode_0xbc},
        {0xbd, &opcode_0xbd},
        {0xbe, &opcode_0xbe},
        {0xbf, &opcode_0xbf},
        {0xc0, &opcode_0xc0},
        {0xc1, &opcode_0xc1},
        {0xc2, &opcode_0xc2},
        {0xc3, &opcode_0xc3},
        {0xc4, &opcode_0xc4},
        {0xc5, &opcode_0xc5},
        {0xc6, &opcode_0xc6},
        {0xc7, &opcode_0xc7},
        {0xc8, &opcode_0xc8},
        {0xc9, &opcode_0xc9},
        {0xca, &opcode_0xca},
        {0xcb, &opcode_0xcb},
        {0xcc, &opcode_0xcc},
        {0xcd, &opcode_0xcd},
        {0xce, &opcode_0xce},
        {0xcf, &opcode_0xcf},
        {0xd0, &opcode_0xd0},
        {0xd1, &opcode_0xd1},
        {0xd2, &opcode_0xd2},
        {0xd4, &opcode_0xd4},
        {0xd5, &opcode_0xd5},
        {0xd6, &opcode_0xd6},
        {0xd7, &opcode_0xd7},
        {0xd8, &opcode_0xd8},
        {0xd9, &opcode_0xd9},
        {0xda, &opcode_0xda},
        {0xdc, &opcode_0xdc},
        {0xde, &opcode_0xde},
        {0xdf, &opcode_0xdf},
        {0xe0, &opcode_0xe0},
        {0xe1, &opcode_0xe1},
        {0xe2, &opcode_0xe2},
        {0xe5, &opcode_0xe5},
        {0xe6, &opcode_0xe6},
        {0xe7, &opcode_0xe7},
        {0xe8, &opcode_0xe8},
        {0xe9, &opcode_0xe9},
        {0xea, &opcode_0xea},
        {0xee, &opcode_0xee},
        {0xef, &opcode_0xef},
        {0xf0, &opcode_0xf0},
        {0xf1, &opcode_0xf1},
        {0xf2, &opcode_0xf2},
        {0xf3, &opcode_0xf3},
        {0xf5, &opcode_0xf5},
        {0xf6, &opcode_0xf6},
        {0xf7, &opcode_0xf7},
        {0xf8, &opcode_0xf8},
        {0xf9, &opcode_0xf9},
        {0xfa, &opcode_0xfa},
        {0xfb, &opcode_0xfb},
        {0xfe, &opcode_0xfe},
        {0xff, &opcode_0xff},
    };

    cb_opcodes = {
        {0x00, &opcode_cb_0x00},
        {0x01, &opcode_cb_0x01},
        {0x02, &opcode_cb_0x02},
        {0x03, &opcode_cb_0x03},
        {0x04, &opcode_cb_0x04},
        {0x05, &opcode_cb_0x05},
        {0x06, &opcode_cb_0x06},
        {0x07, &opcode_cb_0x07},
        {0x08, &opcode_cb_0x08},
        {0x09, &opcode_cb_0x09},
        {0x0a, &opcode_cb_0x0a},
        {0x0b, &opcode_cb_0x0b},
        {0x0c, &opcode_cb_0x0c},
        {0x0d, &opcode_cb_0x0d},
        {0x0e, &opcode_cb_0x0e},
        {0x0f, &opcode_cb_0x0f},
        {0x10, &opcode_cb_0x10},
        {0x11, &opcode_cb_0x11},
        {0x12, &opcode_cb_0x12},
        {0x13, &opcode_cb_0x13},
        {0x14, &opcode_cb_0x14},
        {0x15, &opcode_cb_0x15},
        {0x16, &opcode_cb_0x16},
        {0x17, &opcode_cb_0x17},
        {0x18, &opcode_cb_0x18},
        {0x19, &opcode_cb_0x19},
        {0x1a, &opcode_cb_0x1a},
        {0x1b, &opcode_cb_0x1b},
        {0x1c, &opcode_cb_0x1c},
        {0x1d, &opcode_cb_0x1d},
        {0x1e, &opcode_cb_0x1e},
        {0x1f, &opcode_cb_0x1f},
        {0x20, &opcode_cb_0x20},
        {0x21, &opcode_cb_0x21},
        {0x22, &opcode_cb_0x22},
        {0x23, &opcode_cb_0x23},
        {0x24, &opcode_cb_0x24},
        {0x25, &opcode_cb_0x25},
        {0x26, &opcode_cb_0x26},
        {0x27, &opcode_cb_0x27},
        {0x28, &opcode_cb_0x28},
        {0x29, &opcode_cb_0x29},
        {0x2a, &opcode_cb_0x2a},
        {0x2b, &opcode_cb_0x2b},
        {0x2c, &opcode_cb_0x2c},
        {0x2d, &opcode_cb_0x2d},
        {0x2e, &opcode_cb_0x2e},
        {0x2f, &opcode_cb_0x2f},
        {0x30, &opcode_cb_0x30},
        {0x31, &opcode_cb_0x31},
        {0x32, &opcode_cb_0x32},
        {0x33, &opcode_cb_0x33},
        {0x34, &opcode_cb_0x34},
        {0x35, &opcode_cb_0x35},
        {0x36, &opcode_cb_0x36},
        {0x37, &opcode_cb_0x37},
        {0x38, &opcode_cb_0x38},
        {0x39, &opcode_cb_0x39},
        {0x3a, &opcode_cb_0x3a},
        {0x3b, &opcode_cb_0x3b},
        {0x3c, &opcode_cb_0x3c},
        {0x3d, &opcode_cb_0x3d},
        {0x3e, &opcode_cb_0x3e},
        {0x3f, &opcode_cb_0x3f},
        {0x40, &opcode_cb_0x40},
        {0x41, &opcode_cb_0x41},
        {0x42, &opcode_cb_0x42},
        {0x43, &opcode_cb_0x43},
        {0x44, &opcode_cb_0x44},
        {0x45, &opcode_cb_0x45},
        {0x46, &opcode_cb_0x46},
        {0x47, &opcode_cb_0x47},
        {0x48, &opcode_cb_0x48},
        {0x49, &opcode_cb_0x49},
        {0x4a, &opcode_cb_0x4a},
        {0x4b, &opcode_cb_0x4b},
        {0x4c, &opcode_cb_0x4c},
        {0x4d, &opcode_cb_0x4d},
        {0x4e, &opcode_cb_0x4e},
        {0x4f, &opcode_cb_0x4f},
        {0x50, &opcode_cb_0x50},
        {0x51, &opcode_cb_0x51},
        {0x52, &opcode_cb_0x52},
        {0x53, &opcode_cb_0x53},
        {0x54, &opcode_cb_0x54},
        {0x55, &opcode_cb_0x55},
        {0x56, &opcode_cb_0x56},
        {0x57, &opcode_cb_0x57},
        {0x58, &opcode_cb_0x58},
        {0x59, &opcode_cb_0x59},
        {0x5a, &opcode_cb_0x5a},
        {0x5b, &opcode_cb_0x5b},
        {0x5c, &opcode_cb_0x5c},
        {0x5d, &opcode_cb_0x5d},
        {0x5e, &opcode_cb_0x5e},
        {0x5f, &opcode_cb_0x5f},
        {0x60, &opcode_cb_0x60},
        {0x61, &opcode_cb_0x61},
        {0x62, &opcode_cb_0x62},
        {0x63, &opcode_cb_0x63},
        {0x64, &opcode_cb_0x64},
        {0x65, &opcode_cb_0x65},
        {0x66, &opcode_cb_0x66},
        {0x67, &opcode_cb_0x67},
        {0x68, &opcode_cb_0x68},
        {0x69, &opcode_cb_0x69},
        {0x6a, &opcode_cb_0x6a},
        {0x6b, &opcode_cb_0x6b},
        {0x6c, &opcode_cb_0x6c},
        {0x6d, &opcode_cb_0x6d},
        {0x6e, &opcode_cb_0x6e},
        {0x6f, &opcode_cb_0x6f},
        {0x70, &opcode_cb_0x70},
        {0x71, &opcode_cb_0x71},
        {0x72, &opcode_cb_0x72},
        {0x73, &opcode_cb_0x73},
        {0x74, &opcode_cb_0x74},
        {0x75, &opcode_cb_0x75},
        {0x76, &opcode_cb_0x76},
        {0x77, &opcode_cb_0x77},
        {0x78, &opcode_cb_0x78},
        {0x79, &opcode_cb_0x79},
        {0x7a, &opcode_cb_0x7a},
        {0x7b, &opcode_cb_0x7b},
        {0x7c, &opcode_cb_0x7c},
        {0x7d, &opcode_cb_0x7d},
        {0x7e, &opcode_cb_0x7e},
        {0x7f, &opcode_cb_0x7f},
        {0x80, &opcode_cb_0x80},
        {0x81, &opcode_cb_0x81},
        {0x82, &opcode_cb_0x82},
        {0x83, &opcode_cb_0x83},
        {0x84, &opcode_cb_0x84},
        {0x85, &opcode_cb_0x85},
        {0x86, &opcode_cb_0x86},
        {0x87, &opcode_cb_0x87},
        {0x88, &opcode_cb_0x88},
        {0x89, &opcode_cb_0x89},
        {0x8a, &opcode_cb_0x8a},
        {0x8b, &opcode_cb_0x8b},
        {0x8c, &opcode_cb_0x8c},
        {0x8d, &opcode_cb_0x8d},
        {0x8e, &opcode_cb_0x8e},
        {0x8f, &opcode_cb_0x8f},
        {0x90, &opcode_cb_0x90},
        {0x91, &opcode_cb_0x91},
        {0x92, &opcode_cb_0x92},
        {0x93, &opcode_cb_0x93},
        {0x94, &opcode_cb_0x94},
        {0x95, &opcode_cb_0x95},
        {0x96, &opcode_cb_0x96},
        {0x97, &opcode_cb_0x97},
        {0x98, &opcode_cb_0x98},
        {0x99, &opcode_cb_0x99},
        {0x9a, &opcode_cb_0x9a},
        {0x9b, &opcode_cb_0x9b},
        {0x9c, &opcode_cb_0x9c},
        {0x9d, &opcode_cb_0x9d},
        {0x9e, &opcode_cb_0x9e},
        {0x9f, &opcode_cb_0x9f},
        {0xa0, &opcode_cb_0xa0},
        {0xa1, &opcode_cb_0xa1},
        {0xa2, &opcode_cb_0xa2},
        {0xa3, &opcode_cb_0xa3},
        {0xa4, &opcode_cb_0xa4},
        {0xa5, &opcode_cb_0xa5},
        {0xa6, &opcode_cb_0xa6},
        {0xa7, &opcode_cb_0xa7},
        {0xa8, &opcode_cb_0xa8},
        {0xa9, &opcode_cb_0xa9},
        {0xaa, &opcode_cb_0xaa},
        {0xab, &opcode_cb_0xab},
        {0xac, &opcode_cb_0xac},
        {0xad, &opcode_cb_0xad},
        {0xae, &opcode_cb_0xae},
        {0xaf, &opcode_cb_0xaf},
        {0xb0, &opcode_cb_0xb0},
        {0xb1, &opcode_cb_0xb1},
        {0xb2, &opcode_cb_0xb2},
        {0xb3, &opcode_cb_0xb3},
        {0xb4, &opcode_cb_0xb4},
        {0xb5, &opcode_cb_0xb5},
        {0xb6, &opcode_cb_0xb6},
        {0xb7, &opcode_cb_0xb7},
        {0xb8, &opcode_cb_0xb8},
        {0xb9, &opcode_cb_0xb9},
        {0xba, &opcode_cb_0xba},
        {0xbb, &opcode_cb_0xbb},
        {0xbc, &opcode_cb_0xbc},
        {0xbd, &opcode_cb_0xbd},
        {0xbe, &opcode_cb_0xbe},
        {0xbf, &opcode_cb_0xbf},
        {0xc0, &opcode_cb_0xc0},
        {0xc1, &opcode_cb_0xc1},
        {0xc2, &opcode_cb_0xc2},
        {0xc3, &opcode_cb_0xc3},
        {0xc4, &opcode_cb_0xc4},
        {0xc5, &opcode_cb_0xc5},
        {0xc6, &opcode_cb_0xc6},
        {0xc7, &opcode_cb_0xc7},
        {0xc8, &opcode_cb_0xc8},
        {0xc9, &opcode_cb_0xc9},
        {0xca, &opcode_cb_0xca},
        {0xcb, &opcode_cb_0xcb},
        {0xcc, &opcode_cb_0xcc},
        {0xcd, &opcode_cb_0xcd},
        {0xce, &opcode_cb_0xce},
        {0xcf, &opcode_cb_0xcf},
        {0xd0, &opcode_cb_0xd0},
        {0xd1, &opcode_cb_0xd1},
        {0xd2, &opcode_cb_0xd2},
        {0xd3, &opcode_cb_0xd3},
        {0xd4, &opcode_cb_0xd4},
        {0xd5, &opcode_cb_0xd5},
        {0xd6, &opcode_cb_0xd6},
        {0xd7, &opcode_cb_0xd7},
        {0xd8, &opcode_cb_0xd8},
        {0xd9, &opcode_cb_0xd9},
        {0xda, &opcode_cb_0xda},
        {0xdb, &opcode_cb_0xdb},
        {0xdc, &opcode_cb_0xdc},
        {0xdd, &opcode_cb_0xdd},
        {0xde, &opcode_cb_0xde},
        {0xdf, &opcode_cb_0xdf},
        {0xe0, &opcode_cb_0xe0},
        {0xe1, &opcode_cb_0xe1},
        {0xe2, &opcode_cb_0xe2},
        {0xe3, &opcode_cb_0xe3},
        {0xe4, &opcode_cb_0xe4},
        {0xe5, &opcode_cb_0xe5},
        {0xe6, &opcode_cb_0xe6},
        {0xe7, &opcode_cb_0xe7},
        {0xe8, &opcode_cb_0xe8},
        {0xe9, &opcode_cb_0xe9},
        {0xea, &opcode_cb_0xea},
        {0xeb, &opcode_cb_0xeb},
        {0xec, &opcode_cb_0xec},
        {0xed, &opcode_cb_0xed},
        {0xee, &opcode_cb_0xee},
        {0xef, &opcode_cb_0xef},
        {0xf0, &opcode_cb_0xf0},
        {0xf1, &opcode_cb_0xf1},
        {0xf2, &opcode_cb_0xf2},
        {0xf3, &opcode_cb_0xf3},
        {0xf4, &opcode_cb_0xf4},
        {0xf5, &opcode_cb_0xf5},
        {0xf6, &opcode_cb_0xf6},
        {0xf7, &opcode_cb_0xf7},
        {0xf8, &opcode_cb_0xf8},
        {0xf9, &opcode_cb_0xf9},
        {0xfa, &opcode_cb_0xfa},
        {0xfb, &opcode_cb_0xfb},
        {0xfc, &opcode_cb_0xfc},
        {0xfd, &opcode_cb_0xfd},
        {0xfe, &opcode_cb_0xfe},
        {0xff, &opcode_cb_0xff},
    };
    
}